#!/usr/bin/env bash

: << !
Name: usb-manager
Author: YJ
Email: yj1516268@outlook.com
Created Time: 2023-03-22 15:58:15

Description: 使用udisk2控制可移动USB存储设备

Attentions:
-

Depends:
- udisk2
- jq
!

####################################################################
#+++++++++++++++++++++++++ Define Variable ++++++++++++++++++++++++#
####################################################################
#------------------------- Program Variable
# program name
name=$(basename "$0")
readonly name
# program version
readonly major_version=0.4.1
readonly minor_version=20231013
readonly rel_version=1

#------------------------- Exit Code Variable
readonly err_file=1         # 文件/路径类错误
readonly err_no_program=127 # 未找到命令
readonly err_unknown=255    # 未知错误

#------------------------- Parameter Variable
# description variable
readonly desc=" is a tool for controlling USB storage devices"

####################################################################
#+++++++++++++++++++++++++ Define Function ++++++++++++++++++++++++#
####################################################################
#------------------------- Info Function
function helpInfo() {
  echo -e ""
  echo -e "\x1b[32m$name\x1b[0m\x1b[1m$desc\x1b[0m"
  echo -e "--------------------------------------------------"
  echo -e "Usage:"
  echo -e ""
  echo -e "     $name [OPTION]"
  echo -e ""
  echo -e "Options:"
  echo -e "     -l, --list                                List USB storage devices"
  echo -e "     -m, --mount   [all, PartName, DiskName]   Mount USB storage device"
  echo -e "     -u, --umount  [all, PartName, DiskName]   Unmount USB storage device"
  echo -e "     -r, --remove  [all, PartName, DiskName]   Remove USB storage device"
  echo -e ""
  echo -e "     -h, --help                                Display help information"
  echo -e "     -v, --version                             Display version information"
  echo -e ""
  echo -e "Args:"
  echo -e "     all     : All USB storage devices"
  echo -e "     PartName: Partition name of USB storage device"
  echo -e "     DiskName: USB storage device name"
}

function versionInfo() {
  echo -e ""
  echo -e "\x1b[1m$name\x1b[0m version (\x1b[1m$major_version-$minor_version.$rel_version\x1b[0m)"
}

#------------------------- Feature Function
function checkCommand() {
  if ! command -v "$1" > /dev/null 2>&1; then
    echo -e "$1 is not installed"
    exit $err_no_program
  fi
}

function listAction() { # 列出设备
  # 罗列可移动USB存储设备的名字(NAME)、类型(TYPE)、是否是可移动/热插拔设备(HOTPLUG)和挂载点(MOUNTPOINT)
  devices=$(lsblk -Jplno NAME,TYPE,HOTPLUG,MOUNTPOINT)
  # 使用jq查找符合要求的设备并转为数组存储（IFS=" "指定使用空格作为分隔符）
  IFS=" " read -r -a partnames <<< "$(echo "$devices" | jq -r '.blockdevices[] | select(.type == "part") | select(.hotplug == true) | .name' | tr '\n' ' ')"
  IFS=" " read -r -a mountpoints <<< "$(echo "$devices" | jq -r '.blockdevices[] | select(.type == "part") | select(.hotplug == true) | .mountpoint' | tr '\n' ' ')"

  for ((index = 0; index < ${#partnames[*]}; index++)); do
    if [ "${mountpoints[index]}" == 'null' ]; then
      echo -e "${partnames[index]} is not mounted"
    else
      echo -e "${partnames[index]} is mounted to ${mountpoints[index]}"
    fi
  done
}

function mountAction() { # 挂载设备
  # 罗列可移动USB存储设备的名字(NAME)、类型(TYPE)、是否是可移动/热插拔设备(HOTPLUG)和挂载点(MOUNTPOINT)
  devices=$(lsblk -Jplno NAME,TYPE,HOTPLUG,MOUNTPOINT)
  # 使用jq查找符合要求的设备
  IFS=" " read -r -a disknames <<< "$(echo "$devices" | jq -r '.blockdevices[] | select(.type == "disk") | select(.hotplug == true) | .name' | tr '\n' ' ')"
  IFS=" " read -r -a partnames <<< "$(echo "$devices" | jq -r '.blockdevices[] | select(.type == "part") | select(.hotplug == true) | select(.mountpoint == null) | .name' | tr '\n' ' ')"

  if [[ "$1" == 'all' ]]; then
    # --mount 的参数是'all'，挂载所有part
    for ((index = 0; index < ${#partnames[*]}; index++)); do
      udisksctl mount --no-user-interaction --block-device "${partnames[index]}"
    done
  elif [ -b "$1" ]; then # 检测是否是块设备
    if [[ "${disknames[*]}" =~ $1 ]]; then
      # --mount 的参数是disk，挂载该disk的所有part
      IFS=" " read -r -a disk_parts <<< "$(echo "$devices" | jq -r '.blockdevices[] | select(.type == "part") | select(.hotplug == true) | select(.mountpoint == null) | .[] | scan("'"$1"'.*")?' | tr '\n' ' ')"
      for ((index = 0; index < ${#disk_parts[*]}; index++)); do
        udisksctl mount --no-user-interaction --block-device "${disk_parts[index]}"
      done
    else
      # --mount 的参数是part，挂载该part
      udisksctl mount --no-user-interaction --block-device "$1"
    fi
  else
    echo "$1 is not a USB storage device"
    exit $err_file
  fi
}

function umountAction() { # 卸载设备
  # 罗列可移动USB存储设备的名字(NAME)、类型(TYPE)、是否是可移动/热插拔设备(HOTPLUG)和挂载点(MOUNTPOINT)
  devices=$(lsblk -Jplno NAME,TYPE,HOTPLUG,MOUNTPOINT)
  # 使用jq查找符合要求的设备
  IFS=" " read -r -a disknames <<< "$(echo "$devices" | jq -r '.blockdevices[] | select(.type == "disk") | select(.hotplug == true) | .name' | tr '\n' ' ')"
  IFS=" " read -r -a partnames <<< "$(echo "$devices" | jq -r '.blockdevices[] | select(.type == "part") | select(.hotplug == true) | select(.mountpoint != null) | .name' | tr '\n' ' ')"

  if [[ "$1" == 'all' ]]; then
    # --umount 的参数是'all'，卸载所有part
    for ((index = 0; index < ${#partnames[*]}; index++)); do
      udisksctl unmount --no-user-interaction --block-device "${partnames[index]}"
    done
  elif [ -b "$1" ]; then # 检测是否是块设备
    if [[ "${disknames[*]}" =~ $1 ]]; then
      # --umount 的参数是disk，卸载该disk的所有part
      IFS=" " read -r -a disk_parts <<< "$(echo "$devices" | jq -r '.blockdevices[] | select(.type == "part") | select(.hotplug == true) | select(.mountpoint != null) | .[] | scan("'"$1"'.*")?' | tr '\n' ' ')"
      for ((index = 0; index < ${#disk_parts[*]}; index++)); do
        udisksctl unmount --no-user-interaction --block-device "${disk_parts[index]}"
      done
    else
      # --umount 的参数是part，卸载该part
      udisksctl unmount --no-user-interaction --block-device "$1"
    fi
  else
    echo "$1 is not a USB storage device"
    exit $err_file
  fi
}

function removeAction() { # 移除设备
  # 罗列可移动USB存储设备的名字(NAME)、类型(TYPE)、是否是可移动/热插拔设备(HOTPLUG)和挂载点(MOUNTPOINT)
  devices=$(lsblk -Jplno NAME,TYPE,HOTPLUG,MOUNTPOINT)
  # 使用jq查找符合要求的设备
  IFS=" " read -r -a disknames <<< "$(echo "$devices" | jq -r '.blockdevices[] | select(.type == "disk") | select(.hotplug == true) | .name' | tr '\n' ' ')"
  IFS=" " read -r -a partnames <<< "$(echo "$devices" | jq -r '.blockdevices[] | select(.type == "part") | select(.hotplug == true) | select(.mountpoint != null) | .name' | tr '\n' ' ')"

  # 卸载设备
  umountAction "$1"

  if [[ "$1" == 'all' ]]; then
    # 移除设备
    for ((index = 0; index < ${#disknames[*]}; index++)); do
      udisksctl power-off --no-user-interaction --block-device "${disknames[index]}"
      echo -e "${disknames[index]} is safely removed"
    done
  elif [ -b "$1" ]; then # 检测是否是块设备
    if [[ "${disknames[*]}" =~ $1 ]]; then
      udisksctl power-off --no-user-interaction --block-device "$1"
      echo -e "$1 is safely removed"
    fi
  else
    echo "$1 is not a USB storage device"
    exit $err_file
  fi
}

####################################################################
#++++++++++++++++++++++++++++++ Main ++++++++++++++++++++++++++++++#
####################################################################
ARGS=$(getopt --options "lm:u:r:hv" --longoptions "list,mount:,umount:,remove:,help,version" -n "$name" -- "$@")
eval set -- "$ARGS"

if [[ ${#@} -lt 2 ]]; then
  helpInfo
else
  while true; do
    case $1 in
      -l | --list)
        checkCommand "udisksctl"
        listAction
        shift 1
        ;;
      -m | --mount)
        checkCommand "udisksctl"
        mountAction "$2"
        shift 2
        ;;
      -u | --umount)
        checkCommand "udisksctl"
        umountAction "$2"
        shift 2
        ;;
      -r | --remove)
        checkCommand "udisksctl"
        removeAction "$2"
        shift 2
        ;;
      -h | --help)
        helpInfo
        shift 1
        ;;
      -v | --version)
        versionInfo
        shift 1
        ;;
      --)
        shift 1
        break
        ;;
      *)
        helpInfo
        exit $err_unknown
        ;;
    esac
  done
fi
