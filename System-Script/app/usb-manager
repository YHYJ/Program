#!/usr/bin/env bash

: << !
Name: usb-manager
Author: YJ
Email: yj1516268@outlook.com
Created Time: 2020-08-13 17:57:11

Description: 通过udisks2控制外接USB存储设备的挂载/卸载

Attentions:
-

Depends:
- udisks2
!

####################################################################
#+++++++++++++++++++++++++ Define Variable ++++++++++++++++++++++++#
####################################################################
#------------------------- Program Variable
# program name
name=$(basename "$0")
readonly name
# program version
readonly major_version=1.2.0
readonly minor_version=20230313
readonly rel_version=1

#------------------------- Exit Code Variable
readonly err_no_program=127 # 未找到命令
readonly err_unknown=255    # 未知错误

#------------------------- Parameter Variable
# description variable
readonly desc="用于控制外接USB存储设备"

# file variable
readonly pid_file="/tmp/$name.pid"
# time variable
readonly time_out=1
# dir variable
# readonly open_dir="/run/media/$USER"

####################################################################
#+++++++++++++++++++++++++ Define Function ++++++++++++++++++++++++#
####################################################################
#------------------------- Info Function
function helpInfo() {
  echo -e ""
  echo -e "\033[32m$name\033[0m\033[1m$desc\033[0m"
  echo -e "--------------------------------------------------"
  echo -e "Usage:"
  echo -e ""
  echo -e "     $name [OPTION]"
  echo -e ""
  echo -e "Options:"
  echo -e "     -u, --update      更新$name状态"
  echo -e "     -m, --mount       挂载USB存储设备"
  echo -e "     -d, --unmount     卸载USB存储设备"
  echo -e ""
  echo -e "     -h, --help        显示帮助信息"
  echo -e "     -v, --version     显示版本信息"
}

function versionInfo() {
  echo -e ""
  echo -e "\033[1m$name\033[0m version (\033[1m$major_version-$minor_version.$rel_version\033[0m)"
}

#------------------------- Feature Function
function checkPath() {
  if [[ ! -d $1 ]]; then
    mkdir "$1"
  fi
}

function checkCommand() {
  if ! command -v "$1" &> /dev/null; then
    echo -e "$1 未安装"
    exit $err_no_program
  fi
}

function usb_update() {
  checkPath "$pid_file"
  pid=$(cat "$pid_file")

  if [[ $pid != "" ]]; then
    kill -10 "$pid"
  fi
}

function usb_mount() {
  devices=$(lsblk -Jplno NAME,TYPE,RM,MOUNTPOINT)

  for device in $(echo "$devices" | jq -r '.blockdevices[] | select(.type == "part") | select(.rm == true) | select(.mountpoint == null) | .name'); do
    # 自动挂载
    mountpoint=$(udisksctl mount --no-user-interaction -b "$device")
    mountpoint=$(echo "$mountpoint" | cut -d " " -f 4 | tr -d ".")
  done
  # 自动打开
  # xdg-open "$open_dir" &
}

function usb_unmount() {
  devices=$(lsblk -Jplno NAME,TYPE,RM,MOUNTPOINT)

  for mounted in $(echo "$devices" | jq -r '.blockdevices[] | select(.type == "part") | select(.rm == true) | select(.mountpoint != null) | .name'); do
    # 自动卸载
    udisksctl unmount --no-user-interaction -b "$mounted"
    # 自动弹出
    udisksctl power-off --no-user-interaction -b "$mounted"
  done
}

function usb_print() {
  # 实时显示USB设备状态
  devices=$(lsblk -Jplno NAME,TYPE,RM,SIZE,MOUNTPOINT,VENDOR)
  output=""
  sep_unmounted=""
  sep_mounted=""
  counter=0

  for unmounted in $(echo "$devices" | jq -r '.blockdevices[] | select(.type == "part") | select(.rm == true) | select(.mountpoint == null) | .name'); do
    unmounted=$(echo "$unmounted" | tr -d "[:digit:]")
    unmounted=$(echo "$devices" | jq -r '.blockdevices[] | select(.name == "'"$unmounted"'") | .vendor')
    unmounted=$(echo "$unmounted" | tr -d ' ')

    if [ $counter -eq 0 ]; then
      space=""
    else
      space="   "
    fi
    counter=$((counter + 1))

    output="$output$space$sep_unmounted $unmounted"
  done

  for mounted in $(echo "$devices" | jq -r '.blockdevices[] | select(.type == "part") | select(.rm == true) | select(.mountpoint != null) | .size'); do
    if [ $counter -eq 0 ]; then
      space=""
    else
      space="   "
    fi
    counter=$((counter + 1))

    output="$output$space$sep_mounted $mounted"
  done

  echo "$output"
}

####################################################################
#++++++++++++++++++++++++++++++ Main ++++++++++++++++++++++++++++++#
####################################################################
ARGS=$(getopt --options "umdhv" --longoptions "update,mount,unmount,help,version" -n "$name" -- "$@")
eval set -- "$ARGS"

if [[ ${#@} -lt 2 ]]; then
  echo $$ > "$pid_file"

  trap exit INT
  trap "echo" USR1

  while true; do
    usb_print

    sleep $time_out &
    wait
  done
else
  while true; do
    case $1 in
      -u | --update)
        usb_update
        shift 1
        ;;
      -m | --mount)
        checkCommand "udisks2"
        usb_mount
        usb_update
        result=$?
        if [ $result -eq 0 ]; then
          notify-send --urgency=normal --icon=usbguard-icon --app-name='USB Storage info' '挂载' "完成"
        else
          notify-send --urgency=critical --icon=usbguard-icon --app-name='USB Storage info' '挂载' "失败"
        fi
        shift 1
        ;;
      -d | --unmount)
        checkCommand "udisks2"
        usb_unmount
        usb_update
        result=$?
        if [ $result -eq 0 ]; then
          notify-send --urgency=normal --icon=usbguard-icon --app-name='USB Storage info' '卸载' "完成"
        else
          notify-send --urgency=critical --icon=usbguard-icon --app-name='USB Storage info' '卸载' "失败"
        fi
        shift 1
        ;;
      -h | --help)
        helpInfo
        shift 1
        ;;
      -v | --version)
        versionInfo
        shift 1
        ;;
      --)
        shift 1
        break
        ;;
      *)
        helpInfo
        exit $err_unknown
        ;;
    esac
  done
fi
