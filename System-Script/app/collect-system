#!/usr/bin/env bash

: << !
Name: collect-system
Author: YJ
Email: yj1516268@outlook.com
Created Time: 2023-03-06 10:12:48

Description: 收集指定系统模块的信息

Attentions:
-

Depends:
-
!

####################################################################
#+++++++++++++++++++++++++ Define Variable ++++++++++++++++++++++++#
####################################################################
#------------------------- Program Variable
# program name
name=$(basename "$0")
readonly name
# program version
readonly major_version=0.1.9
readonly minor_version=20230426
readonly rel_version=1

#------------------------- Exit Code Variable
readonly normal=0           # 一切正常
readonly err_file=1         # 文件/路径类错误
readonly err_no_program=127 # 未找到命令
readonly err_unknown=255    # 未知错误

#------------------------- Parameter Variable
# description variable
readonly desc="用于收集指定系统模块的信息"
# path variable
readonly storage="$HOME/.cache/SpiderData"
readonly package_dir="$storage/PackageList"
readonly service_dir="$storage/ServiceList"
readonly app_vim_dir="$storage/App/vim"
readonly app_guake_dir="$storage/App/guake"
readonly user_dir="$storage/UserList"
# app variable
readonly vim_conf="$HOME/.space-vim/private/config.vim"
readonly konsave_dir="$HOME/.config/konsave"
# printf variable
readonly space='    '

####################################################################
#+++++++++++++++++++++++++ Define Function ++++++++++++++++++++++++#
####################################################################
#------------------------- Info Function
function helpInfo() {
  echo -e ""
  echo -e "\033[32m$name\033[0m\033[1m$desc\033[0m"
  echo -e "--------------------------------------------------"
  echo -e "Usage:"
  echo -e ""
  echo -e "     $name [OPTION]"
  echo -e ""
  echo -e "Options:"
  echo -e "     -n, --name [MODULE]   指定要收集信息的模块"
  echo -e ""
  echo -e "     -h, --help            显示帮助信息"
  echo -e "     -v, --version         显示版本信息"
  echo -e ""
  echo -e "Modules:"
  echo -e "     all                   收集全部模块信息"
  echo -e "     package               收集已安装包信息"
  echo -e "     service               收集服务状态信息"
  echo -e "     app                   收集程序配置信息"
  echo -e "     user                  收集用户信息"
}

function versionInfo() {
  echo -e ""
  echo -e "\033[1m$name\033[0m version (\033[1m$major_version-$minor_version.$rel_version\033[0m)"
}

#------------------------- Feature Function
function checkPath() {
  if [[ -e "$1" ]]; then
    if [[ ! -d "$1" ]]; then
      echo -e "指定路径$1不是文件夹，已退出"
      exit $err_file
    fi
  else
    mkdir -p "$1"
    echo -e "\n已创建$1\n"
  fi
}

function checkCommand() {
  if command -v "$1" &> /dev/null; then
    return $normal
  else
    return $err_no_program
  fi
}

function collectPackageInfo() {
  checkPath "$package_dir"
  pacman_list="$package_dir/Pacman.list"
  aur_list="$package_dir/AUR.list"
  printf "%s %-14s \033[36m%s\033[0m %s\n" "$space" "Pacman-Package" "-->" "$pacman_list"
  pacman -Qenq > "$pacman_list" # 官方源中单独指定安装的软件包
  printf "%s %-14s \033[36m%s\033[0m %s\n" "$space" "AUR-Package" "-->" "$aur_list"
  pacman -Qemq > "$aur_list" # AUR中单独指定安装的软件包
}

function collectServiceInfo() {
  checkPath "$service_dir"
  system_list="$service_dir/System.list"
  user_list="$service_dir/User.list"
  printf "%s %-14s \033[36m%s\033[0m %s\n" "$space" "System-Service" "-->" "$system_list"
  systemctl list-unit-files | sed '/transient/d' | sed '/generated/d' | sed '/unit files listed/d' > "$system_list" # System service
  printf "%s %-14s \033[36m%s\033[0m %s\n" "$space" "User-Service" "-->" "$user_list"
  systemctl --user list-unit-files | sed '/transient/d' | sed '/generated/d' | sed '/unit files listed/d' > "$user_list" # User service
}

function collectAppInfo() {
  # vim
  if [[ -e "$vim_conf" ]]; then
    checkPath "$app_vim_dir"
    hotkey_doc="$app_vim_dir/Vim-Hotkey.md"
    printf "%s %-13s \033[36m%s\033[0m %s\n" "$space" "Vim-Hotkey" "-->" "$hotkey_doc"
    # 提取快捷键说明
    grep -r 'Hotkey' "$vim_conf" > "$hotkey_doc"
    # 格式化文档
    sed -i 's/--/|/g' "$hotkey_doc" # 替换'--'为'|'
    sed -i 's/^"//' "$hotkey_doc"   # 删除行首的'"'
    sed -i 's/^/|/' "$hotkey_doc"   # 在行首添加'|'
    sed -i 's/$/|/' "$hotkey_doc"   # 在行尾添加'|'
    # 添加文件头
    line1='|	关键字	|	归属	|	快捷键	|	说明	|'
    line2='|---|---|---|---|'
    sed -i "1i\\$line2" "$hotkey_doc"
    sed -i "1i\\$line1" "$hotkey_doc"
  else
    echo -e "\n似乎未安装 space-vim\n"
  fi

  # guake
  if checkCommand "guake"; then
    checkPath "$app_guake_dir"
    guake_conf="$app_guake_dir/guake.conf"
    printf "%s %-13s \033[36m%s\033[0m %s\n" "$space" "Guake-Confile" "-->" "$guake_conf"
    guake --save-preferences="$guake_conf" # guake的配置文件
  fi

  # konsave
  if checkCommand "konsave"; then
    checkPath "$konsave_dir"
    printf "%s %-13s \033[36m%s\033[0m %s\n" "$space" "Plasma-Confile" "-->" "$konsave_dir"
    konsave --force --save "$(hostname)" &> /dev/null
  fi
}

function collectUserInfo() {
  checkPath "$user_dir"
  id_list="$user_dir/ID.list"
  printf "%s %-9s \033[36m%s\033[0m %s\n" "$space" "User-List" "-->" "$id_list"
  id root yj -Gn > "$id_list" # 当前$USER的ID信息
}

####################################################################
#++++++++++++++++++++++++++++++ Main ++++++++++++++++++++++++++++++#
####################################################################
ARGS=$(getopt --options "n:hv" --longoptions "name:,help,version" -n "$name" -- "$@")
eval set -- "$ARGS"

if [[ ${#@} -lt 2 ]]; then
  helpInfo
else
  while true; do
    case $1 in
      -n | --name)
        case $2 in
          all)
            collectPackageInfo
            collectServiceInfo
            collectAppInfo
            collectUserInfo
            shift 1
            ;;
          package)
            collectPackageInfo
            shift 1
            ;;
          service)
            collectServiceInfo
            shift 1
            ;;
          app)
            collectAppInfo
            shift 1
            ;;
          user)
            collectUserInfo
            shift 1
            ;;
          --)
            shift 1
            break
            ;;
          *)
            echo -e "\n\033[31m[✘]\033[0m 未找到指定的模块"
            ;;
        esac
        shift 1
        ;;
      -h | --help)
        helpInfo
        shift 1
        ;;
      -v | --version)
        versionInfo
        shift 1
        ;;
      --)
        shift 1
        break
        ;;
      *)
        helpInfo
        exit $err_unknown
        ;;
    esac
  done
fi
